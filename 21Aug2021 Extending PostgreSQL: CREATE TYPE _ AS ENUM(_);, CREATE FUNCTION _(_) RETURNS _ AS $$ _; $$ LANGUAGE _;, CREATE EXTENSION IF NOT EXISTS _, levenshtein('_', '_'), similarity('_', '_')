// User-defined data types

// Enumerated data types

CREATE TYPE dayofweek AS ENUM(
  'Monday',
  'Tuesday',
  'Wednesday',
  'Thursday',
  'Saturday',
  'Sunday'
);


// Getting information about user-defined data types

SELECT typname, typcategory
FROM pg_type
WHERE typename = 'dayofweek';

-- output:
typename    typcategory
dayofweek   E
-- E means enumerated data types


SELECT column_name, data_ype, udt_name
FROM INFORMATION_SCHEMA.COLUMNS
WHERE table_name = "film';

-- output:
column_name     data_type              udt_name
title           character varying      varchar
rating          USER_DEFINED           mpaa_rating



// User-defined functions 

CREATE FUNCTION squared (i integer) RETURNS integer AS $$
  BEGIN
    RETURN i * i;
  END;
$$ LANGUAGE plpgsql;


SELECT squared(10);
-- output: 100


// user-defined fucntions in the Sakila database:
-- get_customer_balance(customer_id, effective data): calculates the current outstanding balance for a given customer
-- inventory_held_by_customer(inventory_id): returns the cusotmer_id that is currently renting an inventory item or null if it's currently available
-- inventory_in_stock(inventory_id): returns a boolean value of whether an invenotry item is currently in stock



-- Create an enumerated data type, compass_position
CREATE TYPE compass_position AS ENUM (
  	-- Use the four cardinal directions
  	'North', 
  	'South',
  	'East', 
  	'West'
);
-- Confirm the new data type is in the pg_type system table
SELECT typname
FROM pg_type
WHERE typname='compass_position';



-- The Sakila database has a user-defined enum data type called mpaa_rating. 
-- The rating column in the film table is an mpaa_rating type and contains the familiar rating for that film like PG or R. 
-- This is a great example of when an enumerated data type comes in handy. Film ratings have a limited number of standard values that rarely change.
-- When you want to learn about a column or data type in your database the best place to start is the INFORMATION_SCHEMA. 
-- You can find information about the rating column that can help you learn about the type of data you can expect to find. 
-- For enum data types, you can also find the specific values that are valid for a particular enum by looking in the pg_enum system table.

-- Select the column name, data type and udt name columns
SELECT column_name, data_type, udt_name
FROM INFORMATION_SCHEMA.COLUMNS 
-- Filter by the rating column in the film table
WHERE table_name ='film' AND column_name='rating';

-- output: 
rating  	USER-DEFINED  	mpaa_rating


-- Select all columns from the pg_type table where the type name is equal to mpaa_rating.
SELECT *
FROM pg_type 
WHERE typname='mpaa_rating'

-- output:
typname	    typnamespace	typowner	typlen	typbyval	typtype	typcategory	typispreferred	typisdefined	typdelim	typrelid	typelem	typarray	typinput	typoutput	typreceive	typsend	    typmodin	typmodout	typanalyze	typalign	typstorage	typnotnull	typbasetype	typtypmod	typndims	typcollation	typdefaultbin	typdefault	typacl
mpaa_rating	2200	        16384	    4	      true	    e	      E	           false	        true	        ,	        0	        0	      16434	    enum_in	   enum_out	 enum_recv	enum_send	  -	        -	        -	            i	        p	        false	      0	          -1	      0	        0	              null	        null	      null



-- Select the film title and inventory ids
SELECT 
	f.title, 
    i.inventory_id,
    -- Determine whether the inventory is held by a customer
    inventory_held_by_customer(i.inventory_id) as held_by_cust
FROM film as f 
	INNER JOIN inventory AS i ON f.film_id=i.film_id 
  
-- output:
title 	        inventory_id	  held_by_cust
ACE GOLDFINGER	    9	            366
ACE GOLDFINGER	    10	          null
ACE GOLDFINGER	    11	          null



-- Select the film title and inventory ids
SELECT 
	f.title, 
    i.inventory_id,
    -- Determine whether the inventory is held by a customer
    inventory_held_by_customer(i.inventory_id) as held_by_cust
FROM film as f 
	INNER JOIN inventory AS i ON f.film_id=i.film_id 
WHERE
	-- Only include results where the held_by_cust is not null
    inventory_held_by_customer(i.inventory_id) IS NOT NULL
    
    

// Commonly used enxtensions in PostgreSQL
-- PostGIS: location
-- PostPic: image process
-- fuzzystrmatch
-- pg_trgm


// Querying extensions meta data

//Available Extensions
SELECT name
FROM pg_available_extensions;

// Installed Extensions
SELECT extname
FROM pg_extension;



-- Enable the fuzzystrmatch extension
CREATE EXTENSION IF NOT EXISTS fuzzystrmatch;
-- Confirm that fuzzstrmatch has been enabled
SELECT extname FROM pg_extension;



// Using fuzzystrmatch or fuzzy searching

SELECT levenshtein ('GUMBO', 'GAMBOL');
-- output: 2


// Compare two strings with pg_trgm

SELECT similarity ('GUMBO', 'GAMBOL');

-- output: 0.18181818
-- 0: no matching, 1: a perfect match



-- Select all rows extensions
SELECT * 
FROM pg_extension;

-- output: 
extname		extowner	extnamespace	extrelocatable	extversion	extconfig	extcondition
plpgsql		10		11		false		1.0		null		null
fuzzystrmatch	16384		2200		true		1.1		null		null
pg_trgm	16384	2200		true		1.4		null		null		null



-- Calculate the levenshtein distance for the film title with the string JET NEIGHBOR.
-- Select the title and description columns
SELECT  
  title, 
  description, 
  -- Calculate the levenshtein distance
  levenshtein(title, 'JET NEIGHBOR') AS distance
FROM 
  film
ORDER BY 3
-- order by the 3rd item



-- Select the title and description for all DVDs from the film table.
-- Perform a full-text search by converting the description to a tsvector and match it to the phrase 'Astounding & Drama' using a tsquery in the WHERE clause.

-- Select the title and description columns
SELECT  
  title, 
  description 
FROM 
  film
WHERE 
  -- Match "Astounding Drama" in the description
  to_tsvector(description) @@ 
  to_tsquery('Astounding & Drama');
  
  
  
-- Add a new column that calculates the similarity of the description with the phrase 'Astounding Drama'.
-- Sort the results by the new similarity column in descending order.

SELECT 
  title, 
  description, 
  -- Calculate the similarity
  similarity(description, 'Astounding & Drama')
FROM 
  film 
WHERE 
  to_tsvector(description) @@ 
  to_tsquery('Astounding & Drama') 
ORDER BY 
	similarity(description, 'Astounding & Drama') DESC;


SELECT 
  title, 
  description, 
  -- Calculate the similarity
  similarity(description, 'Astounding & Drama')
FROM 
  film 
WHERE 
  to_tsvector(description) @@ 
  to_tsquery('Astounding & Drama') 
ORDER BY 
	3 DESC;
	
	
