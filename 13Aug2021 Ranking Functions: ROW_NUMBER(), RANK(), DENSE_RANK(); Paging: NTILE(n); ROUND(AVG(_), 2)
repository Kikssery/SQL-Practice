// Ranking Functions
// ROW_NUMBER() always assigns unique numbers, even if two rows' values are the same
// RANK() assigns the same number to rows with identical values, skippin over the next numbers in such cases
// DENSE_RANK() also assigns the same numbers to rows with identical values, but doesn't skip over the next numbers


-- Rank each country's athletes by the count of medals they've earned -- the higher the count, the higher the rank -- without skipping numbers in case of identical values.

WITH Athlete_Medals AS (
  SELECT
    Country, Athlete, COUNT(*) AS Medals
  FROM Summer_Medals
  WHERE
    Country IN ('JPN', 'KOR')
    AND Year >= 2000
  GROUP BY Country, Athlete
  HAVING COUNT(*) > 1)

SELECT
  Country,
  -- Rank athletes in each country by the medals they've won
  Athlete,
  DENSE_RANK() OVER (PARTITION BY Country
                ORDER BY Medals DESC) AS Rank_N
FROM Athlete_Medals
ORDER BY Country ASC, RANK_N ASC;


// Paging: Splitting data into (apporximately) equal chunks
// NTILE(n) splits the data into n apporximately equal pages

NTILE (15) OVER() AS Page

NTILE (3) OVER (ORDER BY Medals DESC) AS Third

// Thirds averages

WITH Country_Medals AS (...),
  
  Thirds AS (
  SELECT
    Country, edals,
    NTILE (3) OVER (ORDER BY Medals DESC) AS Third
  FROM Country_Medals
  
SELECT
  Third.
  ROUND (AVG(Medals), 2) AS Avg_Medals
FROM Thirds
GROUP BY Third
ORDER BY Third ASC;


-- Split the athletes into top, middle, and bottom thirds based on their count of medals.
-- Return the average of each third.

WITH Athlete_Medals AS (
  SELECT Athlete, COUNT(*) AS Medals
  FROM Summer_Medals
  GROUP BY Athlete
  HAVING COUNT(*) > 1),
  
  Thirds AS (
  SELECT
    Athlete,
    Medals,
    NTILE(3) OVER (ORDER BY Medals DESC) AS Third
  FROM Athlete_Medals)
  
SELECT
  -- Get the average medals earned in each third
  Third,
  AVG(Medals) AS Avg_Medals
FROM Thirds
GROUP BY Third
ORDER BY Third ASC;
