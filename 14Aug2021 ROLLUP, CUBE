// Group-level totals:
// ROLLUP is a GROUP BY subclause that includes extra rows for group-level aggregations

// GROUP BY Country, ROLLUP (Medal) 
// will count all Country- and Medal-level totals, then count only Country-level totals and fill in Medal with nulls for these rows

// ROLLUP is hierarchical, de-aggregating from the leftmost provided column to the right-most
// ROLLUP (Country, Medal) includes Country-level totals, but not Medal-level totals
// ROLLUP ( Medal, Country) includes Medal-level totals, but not Country-level totals
// Both include grand totals

// Group-level totals contain nulls; the row with all nulls is the grand total


// CUBE is a non-hierarchical ROLLUP
// CUBE generates all possible group-level aggregations
// ROLLUP (Country, Medal) counts Country- and Medal-level totals, and grand totals



-- Count the gold medals per country and gender
SELECT
  Country,
  Gender,
  COUNT(*) AS Gold_Awards
FROM Summer_Medals
WHERE
  Year = 2004
  AND Medal = 'Gold'
  AND Country IN ('DEN', 'NOR', 'SWE')
-- Generate Country-level subtotals
GROUP BY Country, ROLLUP (Gender)
ORDER BY Country ASC, Gender ASC;



-- Count the medals per gender and medal type
SELECT
  Gender,
  medal,
  count(*) AS Awards
FROM Summer_Medals
WHERE
  Year = 2012
  AND Country = 'RUS'
-- Get all possible group-level subtotals
GROUP BY CUBE(Gender, medal)
ORDER BY Gender ASC, Medal ASC;



// COALESCE() takes a list of values and returns the first non-null value, going from left to right
// COALESCE (null, null, 1, null, 2)
// Useful when using SQL operations that return nulls: ROLLUP, CUBE, Pivoting, LAG, LEAD

SELECT
  COALESCE (Country, 'Both countries') AS Country,
  COALESCE (Medal, 'All medals') AS Medal,
  COUNT(*) AS Awards
FROM summer_medals


// Compressing data:
// Rank is redundant because the ranking is implied
// STRING_AGG (column, separator) takes all the values of a column and concatenates them, with separator in between each value

STRING_AGG (Letter, ',')

-- at the end of the code, add:
SELECT STRING_AGG (Country, ',')
FROM Country_Medals


-- Turn the nulls in the Country column to All countries, and the nulls in the Gender column to All genders.
SELECT
  -- Replace the nulls in the columns with meaningful text
  COALESCE(Country, 'All countries') AS Country,
  COALESCE(Gender, 'All genders') AS Gender,
  COUNT(*) AS Awards
FROM Summer_Medals
WHERE
  Year = 2004
  AND Medal = 'Gold'
  AND Country IN ('DEN', 'NOR', 'SWE')
GROUP BY ROLLUP(Country, Gender)
ORDER BY Country ASC, Gender ASC;


-- After ranking each country in the 2000 Olympics by gold medals awarded, you want to return the top 3 countries in one row, as a comma-separated string. 
-- In other words, turn this:

| Country | Rank |
|---------|------|
| USA     | 1    |
| RUS     | 2    |
| AUS     | 3    |
| ...     | ...  |

-- into this:

USA, RUS, AUS


WITH Country_Medals AS (
  SELECT
    Country,
    COUNT(*) AS Medals
  FROM Summer_Medals
  WHERE Year = 2000
    AND Medal = 'Gold'
  GROUP BY Country),

  Country_Ranks AS (
  SELECT
    Country,
    RANK() OVER (ORDER BY Medals DESC) AS Rank
  FROM Country_Medals
  ORDER BY Rank ASC)

-- Compress the countries column
SELECT STRING_AGG(Country, ', ')
FROM Country_Ranks
-- Select only the top three ranks
WHERE Rank <= 3;
