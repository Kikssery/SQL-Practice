// Adding and subtracting date/time data

SELECT date '2005-09-11' - date '2005-09-10';
-- output: integer 1

SELECT date '2005-09-11' + integer '3';
-- output: date 2005-09-14

SELECT date '2005-09-11 00:00:00' - date '2005-09-09 12:00:00';
-- output: interval 1 day 12:00:00


// Calculating time periods with AGE

SELECT AGE (timestamp '2005-09-11 00:00:00', timestamp '2005-09-09 12:00:00');
-- output: interval 1 day 12:00:00

SELECT 
  AGE (rental_date)
FROM rental;


// Date/time arithmetic using INTERVALs

SELECT timestamp '2019-05-01' + 21 * INTERVAL '1 day';
-- output: timestamp without timezone 2019-05-22 00:00:00


-- calculate the actual number of days rented as well as the true expected_return_date 
-- by using the rental_duration column from the film table along with the familiar rental_date from the rental table.
-- To select columns from both the film and rental tables in a single query, 
-- we'll need to use the inventory table to join these two tables together since there is no explicit relationship between them.

-- Subtract the rental_date from the return_date to calculate the number of days_rented.
SELECT f.title, f.rental_duration,
    -- Calculate the number of days rented
    r.return_date - r.rental_date AS days_rented
FROM film AS f
     INNER JOIN inventory AS i ON f.film_id = i.film_id
     INNER JOIN rental AS r ON i.inventory_id = r.inventory_id
ORDER BY f.title;


-- Now use the AGE() function to calculate the days_rented.
SELECT f.title, f.rental_duration,
    -- Calculate the number of days rented
	AGE(return_date, rental_date) AS days_rented
FROM film AS f
	INNER JOIN inventory AS i ON f.film_id = i.film_id
	INNER JOIN rental AS r ON i.inventory_id = r.inventory_id
ORDER BY f.title;



-- If you were running a real DVD Rental store, there would be times when you would need to determine what film titles were currently out for rental with customers. 
-- In the previous exercise, we saw that some of the records in the results had a NULL value for the return_date. This is because the rental was still outstanding.
-- Each rental in the film table has an associated rental_duration column which represents the number of days that a DVD can be rented by a customer before it is considered late.
-- In this example, you will exclude films that have a NULL value for the return_date and also convert the rental_duration to an INTERVAL type. 
-- Here's a reminder of one method for performing this conversion.

SELECT INTERVAL '1' day * timestamp '2019-04-10 12:34:56'

-- Convert rental_duration by multiplying it with a 1 day INTERVAL
-- Subtract the rental_date from the return_date to calculate the number of days_rented.
-- Exclude rentals with a NULL value for return_date.

SELECT
	f.title,
 	-- Convert the rental_duration to an interval
    INTERVAL '1' day * f.rental_duration AS rental_duration,
 	-- Calculate the days rented as we did previously
    r.return_date - r.rental_date AS days_rented
FROM film AS f
    INNER JOIN inventory AS i ON f.film_id = i.film_id
    INNER JOIN rental AS r ON i.inventory_id = r.inventory_id
-- Filter the query to exclude outstanding rentals
WHERE r.return_date IS NOT NULL
ORDER BY f.title;



-- Convert rental_duration by multiplying it with a 1-day INTERVAL.
-- Add it to the rental date.

SELECT
    f.title,
	r.rental_date,
    f.rental_duration,
    -- Add the rental duration to the rental date
    INTERVAL '1' day * f.rental_duration + r.rental_date AS expected_return_date,
    r.return_date
FROM film AS f
    INNER JOIN inventory AS i ON f.film_id = i.film_id
    INNER JOIN rental AS r ON i.inventory_id = r.inventory_id
ORDER BY f.title;

